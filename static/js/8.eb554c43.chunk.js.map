{"version":3,"sources":["components/contact/Input.js","helpers/sendForm.js","components/contact/Contact.js","hooks/useForm.js"],"names":["Input","title","type","placeholder","validPattern","value","required","autoComplete","name","handleInputChange","messageError","useState","isValid","setIsValid","validForm","test","className","onBlur","onKeyUp","onChange","sendForm","form","a","fetch","method","body","FormData","res","result","json","Contact","useEffect","WOW","init","initialState","setValue","target","useForm","email","message","formValue","reset","expresions","id","onSubmit","e","preventDefault","document","querySelector","then","Swal","fire","catch","err","disabled"],"mappings":"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","file":"static/js/8.eb554c43.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport const Input = ({\r\n  title,\r\n  type,\r\n  placeholder,\r\n  validPattern,\r\n  value,\r\n  required = false,\r\n  autoComplete = \"on\",\r\n  name,\r\n  handleInputChange,\r\n  messageError\r\n}) => {\r\n  \r\n  const [isValid, setIsValid] = useState(\"\");\r\n\r\n  const validForm = () => {\r\n    if(validPattern){\r\n      if(validPattern.test(value)){\r\n        setIsValid(true);\r\n      } else {\r\n        setIsValid(false)\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"form-group mb-3\">\r\n      <label className=\"form__group-label\">\r\n        <small>{title}</small>\r\n      </label>\r\n\r\n      <div className=\"form__group-input-container\">\r\n        <input \r\n          className={`\r\n            ${(isValid && isValid !== \"\") \r\n              ? \"form__group-input-valid\" \r\n            :(!isValid && isValid !== \"\") \r\n              && \"form__group-input-invalid\"}\r\n            form__group-input\r\n          `} \r\n          value={value}\r\n          type={type}\r\n          name={name}\r\n          required={required}\r\n          placeholder={placeholder}\r\n          autoComplete={autoComplete}\r\n          onBlur={validForm}\r\n          onKeyUp={validForm}\r\n          onChange={handleInputChange}\r\n        />\r\n\r\n        {\r\n          (!isValid && isValid !== \"\") \r\n          ? (<i className=\"fa fa-times-circle\"></i>)\r\n          : (isValid && isValid !== \"\")\r\n          &&(<i className=\"fa fa-check-circle\"></i>)\r\n        }\r\n      </div>\r\n      \r\n      {\r\n        !isValid && isValid !== \"\" \r\n        && <p className=\"form__group-message-error\">{messageError}</p>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","export const sendForm = async(form) => {\r\n  const url = \"https://formsubmit.co/ajax/30d2a5de25cbcdcf9780c461ed1acd92\";\r\n\r\n\r\n  const res = await fetch(url, {\r\n    method: 'POST',\r\n    body: new FormData(form)\r\n  });\r\n  const result = res.json();\r\n  return result;\r\n}","import React, { useEffect } from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport WOW from 'wowjs';\r\n\r\nimport { Input } from './Input';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { sendForm } from '../../helpers/sendForm';\r\n\r\nexport default function Contact() {\r\n  useEffect(() => {\r\n    new WOW.WOW().init();\r\n  }, []);\r\n\r\n  const [formValue, handleInputChange, reset] = useForm({\r\n    name: \"\",\r\n    email: \"\",\r\n    message: \"\"\r\n  });\r\n  const {name, email, message} = formValue;\r\n  const expresions = {\r\n    name: /^[a-zA-ZÀ-ÿ\\s]{1,40}$/,\r\n    email: /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/\r\n  }\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if(name !== \"\" && expresions.email.test(email)){\r\n      sendForm(document.querySelector('#formContact'))\r\n        .then( () => {\r\n          reset();\r\n          Swal.fire('Success', 'Message sended!', 'success');\r\n        })\r\n        .catch( err => {\r\n          Swal.fire('Upss..', err.message, 'error');\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"contact__main-container wow fadeIn\" id=\"contact\">\r\n      <h3 className=\"title__content mt-3\">Contact me</h3>\r\n\r\n      <form \r\n        className=\"contact__form-container mt-3\" \r\n        id=\"formContact\"\r\n        onSubmit={handleSendMessage}\r\n      >\r\n        \r\n        <Input \r\n          title=\"Name:\"\r\n          type=\"text\"\r\n          placeholder=\"First and last name\"\r\n          validPattern={expresions.name}\r\n          autoComplete=\"off\"\r\n          required={true}\r\n          value={name}\r\n          name=\"name\"\r\n          handleInputChange={handleInputChange}\r\n          messageError=\"*Character no valid\"\r\n          />\r\n\r\n        <Input \r\n          title=\"Email:\"\r\n          type=\"email\"\r\n          placeholder=\"email@email.com\"\r\n          validPattern={expresions.email}\r\n          autoComplete=\"off\"\r\n          required={true}\r\n          value={email}\r\n          name=\"email\"\r\n          handleInputChange={handleInputChange}\r\n          messageError=\"*Email no valid\"\r\n        />\r\n        \r\n        <div className=\"form-group mb-3\">\r\n          <label className=\"form__group-label\">\r\n            <small>Message:</small>\r\n          </label>\r\n\r\n          <div className=\"form__group-input-container\">\r\n            <textarea\r\n              className=\"form__group-message\"\r\n              name=\"message\"\r\n              placeholder=\"Your message\"\r\n              value={message}\r\n              onChange={handleInputChange}\r\n              required\r\n            />  \r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          className=\"btn btn-primary btn-block mt-2\"\r\n          disabled={(name === \"\" || email === \"\" || message === \"\")}\r\n        >\r\n          Send\r\n        </button>\r\n\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import { useState } from \"react\"\r\n\r\nexport const useForm = (initialState = {}) => {\r\n  const [value, setValue] = useState(initialState);\r\n\r\n  const handleInputChange = ({target}) => {\r\n    setValue({\r\n      ...value,\r\n      [target.name]: target.value\r\n    })\r\n  }\r\n\r\n  const reset = () => setValue(initialState);\r\n\r\n  return [value, handleInputChange, reset];\r\n}\r\n"],"sourceRoot":""}